/*! matrix v0.1.0 | MIT | © Hannes Dröse https://github.com/hd-code/js-snippets */
export function isMatrix(t){var n;if(!(t instanceof Array))return!1;if(0===t.length)return!0;const e=null===(n=t[0])||void 0===n?void 0:n.length;if(void 0===e)return!1;for(let n=0,r=t.length;n<r;n++){const r=t[n];if(!(r instanceof Array)||e!==r.length)return!1;for(let t=0,n=r.length;t<n;t++){if("number"!=typeof r[t])return!1}}return!0};export function flatten(t){const n=[];for(let e=0,r=t.length;e<r;e++)for(let r=0,o=t[e].length;r<o;r++)n.push(t[e][r]);return n};export function transpose(t){return(null===t||void 0===t?void 0:t[0])?t[0].map((n,e)=>t.map(t=>t[e])):[]};export function add(t,n){return t.length!==n.length?[]:t.map((e,r)=>addVector(t[r],n[r]))};export function sub(t,n){return t.length!==n.length?[]:t.map((e,r)=>subVector(t[r],n[r]))};export function mul(t,n){return t.length!==n.length?[]:t.map((e,r)=>mulVectors(t[r],n[r]))};export function dot(t,n){const e=transpose(n);return t.map(t=>e.map(n=>dotVector(t,n)))};export function scale(t,n){const e=[];for(let r=0,o=n.length;r<o;r++)e.push(scaleVector(t,n[r]));return e};export function mulVector(t,n){const e=[];for(let r=0,o=t.length;r<o;r++){const o=t[r];if(o.length!==n.length)return[];e.push(dotVector(o,n))}return e};function addVector(t,n){if(t.length!==n.length)return[];const e=[];for(let r=0,o=t.length;r<o;r++)e.push(t[r]+n[r]);return e}function subVector(t,n){if(t.length!==n.length)return[];const e=[];for(let r=0,o=t.length;r<o;r++)e.push(t[r]-n[r]);return e}function mulVectors(t,n){if(t.length!==n.length)return[];const e=[];for(let r=0,o=t.length;r<o;r++)e.push(t[r]*n[r]);return e}function dotVector(t,n){if(t.length!==n.length||0===t.length||0===n.length)return NaN;let e=0;for(let r=0,o=t.length;r<o;r++)e+=t[r]*n[r];return e}function scaleVector(t,n){const e=[];for(let r=0,o=n.length;r<o;r++)e.push(t*n[r]);return e}