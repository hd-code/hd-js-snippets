"use strict";function BaseStorage(e){let t=e?deepClone(e):{};return{clear:()=>{const e=t;return t={},e},delete:e=>{const r=t[e];return delete t[e],r},filter:e=>{const r={};for(const n in t)try{e(t[n])&&(r[n]=deepClone(t[n]))}catch(e){}return r},get:e=>deepClone(t[e]),getAll:()=>deepClone(t),replace:(e,r)=>{const n={};for(const r in t)n[r]=e(t[r]);return r||(t=n),n},save:e=>{let r="";for(;r=generateKey(),void 0!==t[r];);return t[r]=deepClone(e),r},set:(e,r)=>{const n=t[e];return t[e]=deepClone(r),n}}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.BaseStorage=void 0,exports.BaseStorage=BaseStorage;const hexBase=16,autoKeyLength=16;function generateKey(){const e=[];for(let t=0;t<autoKeyLength;t++)e.push(generateHexDigit());return e.join("")}function generateHexDigit(){return Math.floor(Math.random()*hexBase).toString(hexBase)[0]}function deepClone(e){if(Array.isArray(e)){let t=[];for(let r=0,n=e.length;r<n;r++)t[r]=deepClone(e[r]);return t}if(null!==e&&"object"==typeof e){let t={};for(const r in e)t[r]=deepClone(e[r]);return t}return e}