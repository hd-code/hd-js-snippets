"use strict";function serialize(e){const t=extractKeys(e);return stringifyRows([t,...extractRows(e,t)])}function parse(e){const[t,...r]=parseRows(e);return castObjects(t,r)}function extractKeys(e){let t={};for(let r=0,n=e.length;r<n;r++){const n=e[r];for(const e in n)t[e]||(t[e]=!0)}return Object.keys(t)}function extractRows(e,t){let r=[];for(let n=0,s=e.length;n<s;n++)r[n]=extractRow(e[n],t);return r}function extractRow(e,t){let r=[];for(let n=0,s=t.length;n<s;n++){const s=t[n];r[n]=e[s]}return r}function stringifyRows(e){return e.map(e=>stringifyRow(e)).join("\n")}function stringifyRow(e){return e.map(e=>stringifyEntry(e)).join(",")}function stringifyEntry(e){return void 0===e||"function"==typeof e?"":escape("object"==typeof e?JSON.stringify(e):""+e)}function escape(e){return hasToBeEscaped(e)?'"'+e.replace(/"/g,'""')+'"':e}function hasToBeEscaped(e){return e.includes(",")||e.includes('"')||e.includes("\n")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.parse=exports.serialize=void 0,exports.serialize=serialize,exports.parse=parse;const regexRow=/(([^\n"])|("([^"]|"")*"))+/g,regexEntry=/(([^,"])|("([^"]|"")*"))+/g,regexEscaped=/("([^"]|"")*")/g,regex2Quotes=/""/g;function parseRows(e){const t=e.match(regexRow);if(!t)return[["invalid file"]];let r=[];for(let e=0,n=t.length;e<n;e++)r.push(parseRow(t[e]));return r}function parseRow(e){const t=e.match(regexEntry);if(!t)return["invalid row"];let r=[];for(let e=0,n=t.length;e<n;e++)r.push(parseEntry(t[e]));return r}function parseEntry(e){switch(e){case"":return;case"null":return null;case"false":return!1;case"true":return!0}const t=+e;return isNaN(t)?isEscaped(e)?unescape(e):e:t}function isEscaped(e){return regexEscaped.test(e)}function unescape(e){return e.substring(1,e.length-1).replace(regex2Quotes,'"')}function castObjects(e,t){let r=[];for(let n=0,s=t.length;n<s;n++)r.push(castObject(e,t[n]));return r}function castObject(e,t){let r={};for(let n=0,s=e.length;n<s;n++)void 0!==t[n]&&(r[e[n]]=t[n]);return r}