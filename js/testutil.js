/*! testutil v0.0.3 | MIT | https://github.com/hd-code/web-snippets */
import*as assert from"assert";function testFunc(r,t){const s=t instanceof Array?toCaseMap(t):t;describe(r.name,()=>{for(const t in s){const e=s[t][0],n=s[t][1];it(t,()=>{var t=r(...e);"object"==typeof t?assert.deepStrictEqual(t,n):assert.strictEqual(t,n)})}})}function testFuncClose(s,t,o){const e=t instanceof Array?toCaseMap(t):t;describe(s.name,()=>{for(const t in e){const n=e[t][0],r=e[t][1];it(t,()=>{var t,e=s(...n);typeof e!=typeof r&&(t=new assert.AssertionError({actual:e,expected:r,message:"Returned value does not match expected structure"}),assert.fail(t)),"number"==typeof r?assert.ok(isClose(e,r,o)):(t=flatten(e),e=flatten(r),t.length!==e.length&&assert.fail("Returned value does not match expected structure"),assert.ok(isCloseArray(t,e,o)))})}})}function toCaseMap(t){const n={};return t.forEach(t=>{var e=getName(t);n[e]=t}),n}function getName(t){var e;return`(${(null===(e=t[0])||void 0===e?void 0:e.map(toString).join(", "))||""}) => `+toString(t[1])}const maxStringLen=10;function toString(t){return t instanceof Array?`[${clipString(t.map(toString).join(","),maxStringLen-2)}]`:clipString(""+t,maxStringLen)}function clipString(t,e){return t.length<=e?t:t.slice(0,e-1)+"â€¦"}function flatten(n){const r=[];for(let t=0,e=n.length;t<e;t++){var s,o=n[t];o instanceof Array?(s=flatten(o),r.push(...s)):r.push(o)}return r}function isClose(t,e,n){return Math.abs(t-e)<n}function isCloseArray(n,r,s){for(let t=0,e=n.length;t<e;t++)if(!isClose(n[t],r[t],s))return!1;return!0}export{testFunc,testFuncClose};