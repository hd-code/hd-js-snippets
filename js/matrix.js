/*! matrix v0.1.1 | MIT | © Hannes Dröse https://github.com/hd-code/web-snippets */
import*as Vector from"./vector";export function isMatrix(t){var n;if(!(t instanceof Array))return!1;if(0===t.length)return!0;const r=null===(n=t[0])||void 0===n?void 0:n.length;if(void 0===r)return!1;for(let n=0,e=t.length;n<e;n++){const e=t[n];if(!(e instanceof Array)||r!==e.length)return!1;for(let t=0,n=e.length;t<n;t++)if("number"!=typeof e[t])return!1}return!0};export function flatten(t){var n;const r=[];for(let e=0,o=t.length;e<o;e++){const o=null!==(n=t[e])&&void 0!==n?n:[];for(let t=0,n=o.length;t<n;t++)r.push(o[t])}return r};export function transpose(t){var n,r;return null!==(r=null===(n=t[0])||void 0===n?void 0:n.map((n,r)=>t.map(t=>t[r])))&&void 0!==r?r:[]};export function add(t,n){return t.length!==n.length?[]:t.map((r,e)=>Vector.add(t[e],n[e]))};export function sub(t,n){return t.length!==n.length?[]:t.map((r,e)=>Vector.sub(t[e],n[e]))};export function mul(t,n){return t.length!==n.length?[]:t.map((r,e)=>Vector.mul(t[e],n[e]))};export function dot(t,n){const r=transpose(n);return t.map(t=>r.map(n=>Vector.dot(t,n)))};export function scale(t,n){return n.map(n=>Vector.scale(t,n))};export function mulVector(t,n){const r=[];for(let e=0,o=t.length;e<o;e++){const o=t[e];if(o.length!==n.length)return[];r.push(Vector.dot(o,n))}return r};