/*! matrix v0.2.0 | MIT | https://github.com/hd-code/web-snippets */
import*as Vector from"./vector";export function isMatrix(t){var n;if(!(t instanceof Array))return!1;if(0===t.length)return!0;const e=null===(n=t[0])||void 0===n?void 0:n.length;if(void 0===e)return!1;for(let n=0,r=t.length;n<r;n++){const r=t[n];if(!(r instanceof Array)||e!==r.length)return!1;for(let t=0,n=r.length;t<n;t++)if("number"!=typeof r[t])return!1}return!0};export function add(t,n){if(t.length!==n.length)return[];for(let e=0,r=t.length;e<r;e++)if(t[e].length!==n[e].length)return[];return t.map((e,r)=>Vector.add(t[r],n[r]))};export function sub(t,n){if(t.length!==n.length)return[];for(let e=0,r=t.length;e<r;e++)if(t[e].length!==n[e].length)return[];return t.map((e,r)=>Vector.sub(t[r],n[r]))};export function mul(t,n){if(t.length!==n.length)return[];for(let e=0,r=t.length;e<r;e++)if(t[e].length!==n[e].length)return[];return t.map((e,r)=>Vector.mul(t[r],n[r]))};export function div(t,n){if(t.length!==n.length)return[];for(let e=0,r=t.length;e<r;e++)if(t[e].length!==n[e].length)return[];return t.map((e,r)=>Vector.div(t[r],n[r]))};export function scale(t,n){return n.map(n=>Vector.scale(t,n))};export function mulVector(t,n){const e=[];for(let r=0,o=t.length;r<o;r++){const o=t[r];if(o.length!==n.length)return[];e.push(Vector.dot(o,n))}return e};export function dot(t,n){const e=transpose(n);return t.map(t=>e.map(n=>Vector.dot(t,n)))};export function flatten(t){var n;const e=[];for(let r=0,o=t.length;r<o;r++){const o=null!==(n=t[r])&&void 0!==n?n:[];for(let t=0,n=o.length;t<n;t++)e.push(o[t])}return e};export function transpose(t){var n,e;return null!==(e=null===(n=t[0])||void 0===n?void 0:n.map((n,e)=>t.map(t=>t[e])))&&void 0!==e?e:[]};