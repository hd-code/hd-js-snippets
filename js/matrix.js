/*! matrix v0.2.0 | MIT | https://github.com/hd-code/web-snippets */
import*as Vector from"./vector";function isMatrix(r){var t;if(!(r instanceof Array))return!1;if(0===r.length)return!0;var e=null===(t=r[0])||void 0===t?void 0:t.length;if(void 0===e)return!1;for(let t=0,n=r.length;t<n;t++){var l=r[t];if(!(l instanceof Array)||e!==l.length)return!1;for(let t=0,n=l.length;t<n;t++)if("number"!=typeof l[t])return!1}return!0}function add(r,e){if(r.length!==e.length)return[];for(let t=0,n=r.length;t<n;t++)if(r[t].length!==e[t].length)return[];return r.map((t,n)=>Vector.add(r[n],e[n]))}function sub(r,e){if(r.length!==e.length)return[];for(let t=0,n=r.length;t<n;t++)if(r[t].length!==e[t].length)return[];return r.map((t,n)=>Vector.sub(r[n],e[n]))}function mul(r,e){if(r.length!==e.length)return[];for(let t=0,n=r.length;t<n;t++)if(r[t].length!==e[t].length)return[];return r.map((t,n)=>Vector.mul(r[n],e[n]))}function div(r,e){if(r.length!==e.length)return[];for(let t=0,n=r.length;t<n;t++)if(r[t].length!==e[t].length)return[];return r.map((t,n)=>Vector.div(r[n],e[n]))}function scale(n,t){return t.map(t=>Vector.scale(n,t))}function mulVector(r,e){const l=[];for(let t=0,n=r.length;t<n;t++){var o=r[t];if(o.length!==e.length)return[];l.push(Vector.dot(o,e))}return l}function dot(t,n){const r=transpose(n);return t.map(n=>r.map(t=>Vector.dot(n,t)))}function flatten(r){var e;const l=[];for(let t=0,n=r.length;t<n;t++){var o=null!==(e=r[t])&&void 0!==e?e:[];for(let t=0,n=o.length;t<n;t++)l.push(o[t])}return l}function transpose(r){var t;return null!==(t=null===(t=r[0])||void 0===t?void 0:t.map((t,n)=>r.map(t=>t[n])))&&void 0!==t?t:[]}export{isMatrix,add,sub,mul,div,scale,mulVector,dot,flatten,transpose};